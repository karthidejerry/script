use strict;
use Expect;
use NE;

die "Usage: collectNEinfo.pl <Input File> \n Version 1.0 "  if(@ARGV<1);
my $file_name = shift;
my %INPUT=();
my $SuccessFlag;
my $fh;
my $fhs;
use constant FIELD_SEPARATOR => ",";
use constant NEW_LINE => "\n";


initLogFH("Logs_Reg_read.txt");
printLogHeader();
Arrange_Input_Value($file_name);


my $fileName="NE_info.csv";
#$fhs=newOpenfile($fileName);
if(-e $fileName) {
	$fhs=newOpenfile($fileName);
	print (" $fileName already present, so appended  ");
}
else {
	my $heading = "Node IP,";
	foreach my $regVal (@{$INPUT{"RegHash"}}) {
		foreach my $offsetVal (@{$INPUT{"Register_offset"}}) {
		$heading .= $regVal."[".$offsetVal."],";
		}
	}
	if($INPUT{"Collect_info_from_secondary"} =~ /enable/i) {
		        foreach my $regVal (@{$INPUT{"RegHash"}}) {
                foreach my $offsetVal (@{$INPUT{"Register_offset"}}) {
                $heading .= $regVal."[".$offsetVal."] from slave card,";
                }
        }

	}

	if($INPUT{"ObjectHash"} ne undef) {
		foreach my $objName (sort keys %{$INPUT{"ObjectHash"}}) {
			foreach my $attrV (@{$INPUT{"ObjectHash"}{"$objName"}}) {
				$heading .= $attrV."[".$objName."]".",";
			}
		}
	}
	$heading .="date,time,";
	$fhs=newOpenfile($fileName);
	fileWrite($fhs,$heading);
}

&main;

sub main {
	foreach my $IP (@{$INPUT{"NodeIPlist"}}){
		my @cvsString = $IP;
		comment("===== IP :: $IP =====");
		$SuccessFlag=0;
		$SuccessFlag=checkNodeAccessibility($IP);
		next if($SuccessFlag != 1);
		if ($INPUT{"Reg_req"} == 1) {	
#			my $cmd ="ssh guest\@$IP \n";
			my $cmd ="telnet $IP 2023 \n";
			my $exp = Expect->spawn($cmd) or die "Cannot spawn telnet: $!\n";
			$exp->log_stdout(0);
			$exp->log_file("Exp_log.txt");
			$SuccessFlag=Login_and_SU($exp,$IP,$INPUT{"Exp_timeout"},"Master");
			if($SuccessFlag) {
				my $prompt = findbashprompt($exp,$INPUT{"Exp_timeout"});
				if($SuccessFlag == 1) {
					foreach my $Vcmd(@{$INPUT{"RegHash"}}) {  #@RegVaaalue
						my $regVal = $INPUT{"RegVal"};
						foreach my $offsetValue (@{$INPUT{"Register_offset"}}) {
							my $cmd = "echo \"$regVal $offsetValue q\"| /usr/sbin/qwerty/test /dev/$Vcmd |grep \"Read value\"";
							my $Reg_string = RegRead($exp,$cmd,$prompt,$INPUT{"Exp_timeout"});
							chomp($Reg_string);
							push (@cvsString,$Reg_string);
						}
					}
				}
				if($INPUT{"Collect_info_from_secondary"} =~ /enable/i) {
					my $secondaryip = getsecondaryip($exp,$prompt,$INPUT{"Exp_timeout"}); 
					my $secondary_SuccessFlag=0;
					$secondary_SuccessFlag=checkSlotAccessibility($exp,$secondaryip,$prompt,$INPUT{"Exp_timeout"});
					if($secondary_SuccessFlag) {
						my $cmd = "telnet $secondaryip 2023";
						$exp->send("$cmd \n");
						sleep 2;
						$secondary_SuccessFlag = Login_and_SU($exp,$secondaryip,$INPUT{"Exp_timeout"},"Slave");
							if($secondary_SuccessFlag == 1) {
							foreach my $Vcmd(@{$INPUT{"RegHash"}}) {  #@RegVaaalue
								my $regVal = $INPUT{"RegVal"};
								foreach my $offsetValue (@{$INPUT{"Register_offset"}}) {
									my $cmd = "echo \"$regVal $offsetValue q\"| /usr/sbin/qwerty/test /dev/$Vcmd |grep \"Read value\"";
									my $Reg_string = RegRead($exp,$cmd,$prompt,$INPUT{"Exp_timeout"});
									chomp($Reg_string);
									push (@cvsString,$Reg_string);
								}
							}
						}
						Exit_from_SUnTelnet($exp,$prompt,$INPUT{"Exp_timeout"});
					}
                                                if($secondary_SuccessFlag == 0) {
                                                        foreach my $regVal (@{$INPUT{"RegHash"}}) {
                                                                foreach my $offsetVal (@{$INPUT{"Register_offset"}}) {
                                                                        my $val = "Access error";
                                                                        push (@cvsString, $val);
                                                                }
                                                        }
                                                }
				}
				Exit_from_SUnTelnet($exp,$prompt,$INPUT{"Exp_timeout"}); #$exp,$prompt,$timeOut
			}
		}
		if (($INPUT{"Obj_req"} == 1) and ($SuccessFlag == 1)) {
			my $ne = new NE($IP, $INPUT{"UI_username"}, $INPUT{"UI_password"});
			foreach my $ObjName(sort keys %{$INPUT{"ObjectHash"}}){  #
				my $obj = $ne->getObjects($ObjName);
				my $attr_string;
				if((@$obj ==0) or (scalar @$obj ==0) or (!@$obj)) {
					foreach my $attr (@{$INPUT{"ObjectHash"}{"$ObjName"}}) {
						push (@cvsString," ");
					}
					next;
				}
				foreach my $val (@$obj) {
					foreach my $attr (@{$INPUT{"ObjectHash"}{"$ObjName"}}) {
#				comment("Object=".$val->{"ObjectMIBName"}.",attr name=$attr,value=".$val->{$attr});
						$attr_string = $val->{$attr};
						chomp($attr_string);
						$attr_string=~ s/\cJ|\cI|\cM|\cH//g;
						push (@cvsString,$attr_string);
					}

				}
			}
		}
		my $dateStr = `date +%d/%m/20%y`;
		my $timeDetails = `date +%T`;
		chomp($dateStr);
		chomp($timeDetails);
		push (@cvsString,($dateStr,$timeDetails));
		fileWrite($fhs,@cvsString);
	}	
}



sub checkSlotAccessibility {
        my($exp,$slotip,$prompt,$TimeOut) = @_;
        my $cmd = "ping -c3 $slotip";
        $exp->send("\n");
        $exp->expect($TimeOut, -re,"$prompt");
        $exp->clear_accum();
        $exp->send("$cmd \n");
        $exp->expect($TimeOut, -re,"$prompt");
        my $response = $exp->exp_before();
        $response =~ s/\cJ|\cI|\cM//g;
        if ($response =~ /3 packets transmitted, 3 received, 0% packet loss|3 packets transmitted, 3 packets received, 0% packet loss/) {
                return 1;
        }
        return 0;

}




sub Arrange_Input_Value{
	my ($file_name)=@_;
	validateInputFile($file_name);
	open(DATA , "< $file_name");
	my @output = <DATA>;
	close DATA;
	my $reg_bit;
	my $Reg_req = 0;
	my $Obj_req = 0;
	foreach my $out (@output) {
		next if (!defined($out));
		next if($out =~ /^#/);
		chomp ($out);
		($out, undef) = split (/ #/,$out);
		my($inpArg, $value) = split(/=/,$out);
		$value =~ s/^\s+|\s+$//g;
		if ($inpArg =~ /^NodeIPlist/i) {
			my @ipArray = split(/,/,$value);
			$INPUT{"NodeIPlist"} = \@ipArray;
		}
		elsif ($inpArg =~ /^Objects_and_Attributes/i) {
			my ($keyVal,$ValArr) = split(/;/,$value);
			my @ObjectHash = split(/,/,$ValArr);
			$INPUT{"ObjectHash"}->{$keyVal} = \@ObjectHash;
			$Obj_req = 1;
		}
		elsif ($inpArg =~ /^Register_Name/i) {
			my @RegVl = split(/;/,$value);	
			$INPUT{"RegHash"} = \@RegVl;
			$Reg_req = 1;

		}
		elsif($inpArg =~ /^Register_bit/i) {
			$reg_bit =$value;
		}
		elsif($inpArg =~ /^Register_Value/i) {
			$INPUT{"Registe_Value_converter"} = $value;
		}
		elsif($inpArg =~ /^Register_offset/i) {
			my @offset = split(/,/,$value);
                        $INPUT{"Register_offset"} = \@offset;
                }
		elsif($inpArg =~ /^UI_username/i) {
                        $INPUT{"UI_username"} = $value;
                }
                elsif($inpArg =~ /^UI_password/i) {
                        $INPUT{"UI_password"} = $value;
                }
                elsif($inpArg =~ /^ssh_username/i) {
                        $INPUT{"ssh_username"} = $value;
                }
                elsif($inpArg =~ /^ssh_password/i) {
                        $INPUT{"ssh_password"} = $value;
                }
                elsif($inpArg =~ /^SU_password/i) {
                        $INPUT{"SU_password"} = $value;
                }
		elsif($inpArg =~ /^Collect_info_from_secondary/i) {
			$INPUT{"Collect_info_from_secondary"} = $value if($value =~ /^enable$|^disable$/i);
			
		}
		elsif($inpArg =~ /^Exp_timeout/i) {
			$INPUT{"Exp_timeout"} = $value;
		}

	}
	$INPUT{"Register_offset"} = 0 if(!($INPUT{"Register_offset"}));
	$INPUT{"UI_username"} = "qwerty" if(!($INPUT{"UI_username"}));
	$INPUT{"UI_password"} = "12345" if(!($INPUT{"UI_password"}));
	$INPUT{"ssh_username"} = "guest" if(!($INPUT{"ssh_username"}));
	$INPUT{"ssh_password"} = "123456" if(!($INPUT{"ssh_password"}));
	$INPUT{"SU_password"} = "123456789" if(!($INPUT{"SU_password"}));	
	$INPUT{"Collect_info_from_secondary"} = "disable" if(!($INPUT{"Collect_info_from_secondary"}));
	$INPUT{"Exp_timeout"} = 60 if(!($INPUT{"Exp_timeout"}));
	if(!$reg_bit) {
		$reg_bit = 8
	}
	else {
		$reg_bit = 0 if($reg_bit == 8);
		$reg_bit = 8 if($reg_bit == 16);
		$reg_bit = 9 if($reg_bit == 32);
	}
	$INPUT{"RegVal"} = $reg_bit;
	$INPUT{"Obj_req"} = $Obj_req;
	$INPUT{"Reg_req"} = $Reg_req;
}



sub validateInputFile {
    my($file) = @_;
    if(-e $file) {
        print("\n Input file is: $file \n");
    }
    else {
        print("\n STDERR File $file doesnot exist \n");
        print("\n Usage: perl collectNEinfo.pl <input file with absolute path> \n");
        die;
    }
}







sub RegRead{
	my($exp,$cmd,$prompt,$TimeOut)=@_;
       $exp->send("\n");
        $exp->expect($TimeOut, -re, "$prompt");
        sleep(3);
        $exp->send("$cmd \r");
        $exp->expect($TimeOut, -re, "$prompt");
        my $Reg81Value = $exp->exp_before();
        $Reg81Value =~ s/\cJ|\cI|\cM|\cH/ /g;
        my @RegVal = split (/Option :Value of offset : Read value =/,$Reg81Value);
	@RegVal = split (/at offset/,$RegVal[1]);
#sprintf( "%b", hex($exactValue[0]));
	my $RegValue = $RegVal[0];
	$RegValue =~s/\s//;
	$RegValue=sprintf( "%b", hex($RegValue)) if ($INPUT{"Registe_Value_converter"} =~ /binary/i);
	$RegValue=sprintf( "%d", hex($RegValue)) if ($INPUT{"Registe_Value_converter"} =~ /dec/i);
#	comment("Reg VAlue = $RegValue");
	return $RegValue;
}



sub checkForNEAccessibility {
	my ($ip) = @_;
	my $isSuccess  = 0;
	my $iteration = 0;
	while ($iteration < 3) {
		my $successStr = "20080/tcp open unknown";
		my @response = `nmap -PN -p 20080 $ip`; #nmap -PS -p 20080 $ip
			foreach my $line (@response) {
				chomp($line);
				next if (!defined $line);
				$line =~ (s/\ +/\ /g);
				if ($line =~ /$successStr/) {
					$isSuccess = 1;
					comment("Node $ip is reachable");
					return 1;
				} 
			}
		$iteration++;
		if($iteration == 5) {
			comment("Node $ip is not reachable");
			return 0;
		}
	}
	comment("Node $ip is not reachable");
	return 0;
}


sub getsecondaryip {
        my ($exp,$prompt,$timeOut) =@_;
        $exp->send("ifconfig mate\n");
        $exp->expect($timeOut, -re, "$prompt");
        my @output1 = $exp->exp_before();
        my $output2 = shift @output1;
#        my $output3 = shift @output1;
        my $count=0;
        my $newip;
        $output2 =~ /(inet addr:)(.*)(Bcast:*)/;
        my $masterip = $2;
        chomp($masterip);
        $masterip =~/(\d+).(\d+).(\d+).(\d+)/;
        foreach my $new ($1,$2,$3,$4) {
                $count++;
                if ($new =~ /254/) {
                        if ($count == 4) {
                                $newip .="253"
                        }
                        else {
                                $newip .="253."
                        }
                        next;
                }
#       chomp($new);
                if ($count == 4) {
                        $newip .=$new;
                }
                else {
                        $newip .=$new.".";
                }
        }
        return $newip;
}





sub Login_and_SU {
        my ($exp,$NodeIP,$timeOut,$card) = @_;
        my $sys_username = $INPUT{"ssh_username"};
        my $sys_user_passwd = $INPUT{"ssh_password"};
        my $su_passwd = $INPUT{"SU_password"};
        my $prompt = ">";
        my $nologin = login($exp,$sys_username,$sys_user_passwd);
        if (!$nologin) {
		comment("Connected to: $NodeIP");
                AddEnter($exp,$prompt,$timeOut);
                my $whoami =becomeSU($exp,$su_passwd,$card,$timeOut);
                if ($whoami) {
                        AddEnter($exp,$prompt,$timeOut);
                        return 1;
                }
                else {
                        comment("\n Can not login as super user in $card card \n");
                        return 0;
			}
        }
        else {
                comment("\n Login not happend in $card card");
                return 0;
        }



}

sub Exit_from_SUnTelnet {
        my ($exp,$prompt,$timeOut) =@_;
        $exp->send("exit \n");
        $exp->expect($timeOut, -re,"$prompt");
        $exp->send("exit \n");
        $exp->expect($timeOut, -re,"$prompt");
}



#*****************************************************

=item

Validate ip 

=cut

sub validateIP {
    my ($value) = @_;
    my $errStatus = 1;
    my(@octets) = $value =~ /^(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})$/;
    $errStatus *= 0 unless (@octets == 4);
    foreach (@octets) {
        $errStatus *= 0 unless ($_ >= 0 && $_ <= 255);
    }
    return $errStatus;
}

=item

Check node accessibility, using ping 

=cut

sub checkNodeAccessibility {
    my ($ip) = @_;
    my $response = `ping -c3 $ip`;
    if($response !~ /3 packets transmitted, 3 received, 0% packet loss/i){
#                comment (" Access Error: Node[$ip] is not Accessible");
        comment(" Access Error:: ping to node $ip failed");
        return 0;
    }
	my $ne_flag = checkForNEAccessibility($ip);
        return $ne_flag;
}


=item

Finding bash prompt

=cut

sub findbashprompt {
        my ($exp,$TimeOut) = @_;
        $exp->clear_accum();
        $exp->send("\n");
        $exp->expect($TimeOut, -re,">");
        my $bashname = $exp->exp_before();
        $bashname =~ s/\cJ|\cI|\cM//g;
        $exp->clear_accum();
        return $bashname.">";

}

=item

Add one enter

=cut

sub AddEnter {
        my ($exp,$prompt,$timeOut) = @_;
        $prompt = ">" if(!($prompt));
        $timeOut = 60 if(!($timeOut));
        $exp->send("\n");
        $exp->expect($timeOut, -re,"$prompt");
        $exp->clear_accum();
        return;

}



=item

Becoming super user.

=cut

sub becomeSU {
    my ($exp, $passwd, $which,$TimeOut) = @_;
    my $maxIterations = 3;
    while($maxIterations) {
        $exp->send("su - root\n");
        login($exp,"root",$passwd);
        my $whoami;
        $exp->send("\n");
        $exp->expect($TimeOut, -re,">");
        $exp->clear_accum();
        $exp->send("whoami\n");
        $exp->expect($TimeOut,[ qr 'root', sub { $whoami = 1;exp_continue;}],[ qr 'guest', sub { print " Still guest user";exp_continue;}],'-re',qr'[#>:] $');
        if($whoami == 1) {
            comment (" Becoming super user on $which card \n", 1);
            return(1);
        }
        $maxIterations -= 1;
        $exp->send("\n");
        $exp->expect($TimeOut, -re,">");
    }
        comment("\n Access Error:: login as super user on $which card");
}


=item

Login function

=cut

sub login {
        my $exp = shift;
        my $sys_username =  shift;
        my $sys_user_passwd = shift;
        my $nologin;
        my $spawn_ok;
        $exp->expect(
                        120,
                        [
                        qr'login: $',
                        sub {
                        $spawn_ok = 1;
                        my $fh = shift;
                        $fh->send("$sys_username\n");
                        exp_continue;
                        }
                        ],
                        [
                        qr'Password: $',
                        sub {
                        my $fh = shift;
                        $fh->send("$sys_user_passwd\n");
                        exp_continue;
                        }
                        ],
                        [
                        qr 'Connection timed out',sub {
                                $nologin = 1;
                                comment("\n Connection: Timed Out\n");
                        }
                        ],
			[qr 'Are you sure you want to continue connecting (yes/no)?',sub {my $fh=shift; $fh->send("yes \n"); exp_continue; }], 		

                        [
                                qr 'Authentication failure',sub {
                                        $nologin = 1;
                                        comment(" Authentication failure\n");
                                        exp_continue;
                                }
                        ],
                        [
                                eof => sub {
                                        if ($spawn_ok) {
                                                $nologin = 1;
                                                comment("\nERROR: premature EOF in login.\n");
                                        }
                                        else {
                                                $nologin = 1;
                                                comment("\n ERROR: could not spawn telnet.\n");
                                        }
                                }
                        ],
                        [
                                timeout => sub {
                                        $nologin = 1;
                                        comment("\n No login.\n");
                                }
                        ],

                        '-re',
                        qr'[#>:] $',

                        );
                        $exp->clear_accum();
                        return($nologin);
}




##################################### File handler ###########################

sub initLogFH {
    my ($fileName) = @_;
    $fh = myOpenFile($fileName);
}

sub myOpenFile {
    my ($filename) = @_;
    my $fh;
    if (defined $filename) {
        my $commentf = $filename;
        $fh = new IO::File $commentf, "w";
        die_with_error("Unable to open $commentf for logging") unless (defined($fh));
    }
    else {
        $fh = new IO::File;
        die_with_error("Unable to open STDOUT for commentging") unless ($fh->fdopen(fileno(STDOUT), "w"));
    }
    autoflush $fh 1;
    return $fh;
} ## end sub myOpenFile


sub newOpenfile {
        my ($filename) = @_;
        $fhs = new IO::File ">> $filename";
        if (defined $fhs) {
        }
        else {
                $fhs  = myOpenFile($filename);
        }
        return $fhs;
}

sub fileWrite {
    my ($FH, @items) = @_;
    foreach my $data (@items) {
        print $FH $data;
#       if ($data != NEW_LINE)
        print $FH FIELD_SEPARATOR;# if ($data != NEW_LINE);
    }
        print $FH NEW_LINE;
}



sub comment {
    my ($string, $skipPrint) = @_;
    my $count = 0;
    if(!defined $skipPrint) {
        print "\n$string";
    }
    print $fh "$string \n";
    if(!defined $skipPrint) {
        while ($count < 1) {
            print ("\n");
            $count ++;
        }
    }
}



sub die_with_error {
    my ($errorStr) = @_;
    my $timeStr = `date`;
    print ("\n");
    comment("$errorStr \n Execution End time :$timeStr");
    exit;
} ## end sub die_with_error


sub printLogHeader {
    my $timeStr = `date`;
#    comment("=" x 20);
    comment("Execution Start time: ". $timeStr);
}

sub printLogTrailer {
    my $timeStr = `date`;
    comment("Execution End time: ". $timeStr);
}


